"=============================================================================="
" FILE:         vimrc                                                          "
" AUTHOR:       Hayden Rouille :: https://github.com/haydenrou                 "
" DESCRIPTION:  My general vimrc config                                        "
"=============================================================================="

" Leader
let mapleader = " "

set backspace=2      " Backspace deletes like most programs in insert mode
set nobackup
set noerrorbells
set nowritebackup
set noswapfile       " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set noshowmode
set autowrite        " Automatically :write before running commands
set relativenumber   " show the numbers above your line to relative of current line
set mouse=a          " make vim clickable
set spelllang=en     " spelling in english
set pastetoggle=<F2> " allow pasting with correct indentation
set cursorline
set smartindent
set nowrap
set hidden
set ignorecase
set incsearch
set scrolloff=8
set smartcase
set lazyredraw
set magic
set exrc
set number
set completeopt=menuone,noinsert,noselect
set updatetime=50
set inccommand=split

if has("nvim-0.5.0") || has("patch-8.1.1564")
        set signcolumn=number
else
        set signcolumn=yes
endif

" correct spelling on previous word
set spell spelllang=en_gb
nnoremap <leader>sp :norm mm[s1z=`m<cr>

set shiftround
set expandtab

" To automatically unfold all of a file
set foldlevelstart=99

" Use one space, not two, after punctuation.
set nojoinspaces

set vb t_vb=
set undofile

" https://github.com/junegunn/fzf.vim/issues/456
" Depending where it's installed
set rtp+=~/.fzf
set rtp+=/usr/local/opt/fzf

" Use RG for grepping
set grepprg=rg\ --vimgrep\ --smart-case\ --hidden\ --follow

" Splits open to the right and below
set splitbelow splitright

" https://neovim.io/doc/user/nvim.html#nvim-from-vim
set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath = &runtimepath

" add function to call for non-markdown https://stackoverflow.com/questions/6496778/vim-run-autocmd-on-all-filetypes-except
" autocmd BufWritePre * %s/\s\+$//e

filetype on

call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree'
Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'yarn install --frozen-lockfile'}
Plug 'mbbill/undotree'
Plug 'plasticboy/vim-markdown'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install'  }
Plug 'mattn/emmet-vim'
Plug 'junegunn/vim-easy-align'
Plug 'christoomey/vim-system-copy'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'elixir-editors/vim-elixir'
Plug 'rust-lang/rust.vim'
Plug 'haydenrou/tickit.vim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-treesitter/nvim-treesitter-context'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'nvim-lua/plenary.nvim' " Required for harpoon
Plug 'ThePrimeagen/harpoon'

Plug 'Eandrju/cellular-automaton.nvim'
nnoremap <leader>fml :CellularAutomaton make_it_rain<CR>

" Colorschemes
Plug 'rafi/awesome-vim-colorschemes'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'folke/tokyonight.nvim', { 'branch': 'main' }
Plug 'catppuccin/nvim', { 'as': 'catppuccin' }

" Use rg for FZF
if executable('rg')
  let g:rg_derive_root='true'
endif

call plug#end()

syntax enable

let g:gruvbox_contrast_dark = 'hard'
if exists('+termguicolors')
        let &t_8f = "\<Esc[38;2;%lu;%lu;%lum"
        let &t_8b = "\<Esc[48;2;%lu;%lu;%lum"
endif
let g:gruvbox_invert_selection='0'
let g:airline_theme='badwolf'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_powerline_fonts = 1

colorscheme tender

hi Normal guibg=NONE ctermbg=NONE
hi NormalNC guibg=NONE ctermbg=NONE
hi CursorLine guibg=NONE ctermbg=NONE
hi EndOfBuffer guibg=NONE ctermbg=NONE
hi NonText guibg=NONE ctermbg=NONE
hi Search cterm=NONE ctermbg=LightMagenta ctermfg=black

" Make it obvious where 80 characters is
highlight ColorColumn ctermbg=red
call matchadd('ColorColumn', '\%81v', 100)


fun! TrimWhitespace()
        let l:save = winsaveview()
        keeppatterns %s/\s\+$//e
        call winrestview(l:save)
endfun

augroup MOREBUFFS
        autocmd!

        autocmd FileType html,css,erb,jsx,javascript,rb,typescriptreact,javascriptreact,scss,typescript,json setlocal shiftwidth=2 tabstop=2 softtabstop=2
        autocmd FileType go set softtabstop=0 noexpandtab
        autocmd FileType html,css,erb,jsx,javascript,typescriptreact,javascriptreact EmmetInstall

        " https://github.com/tpope/vim-commentary/issues/68
        " autocmd FileType javascript,javascriptreact,typescript,typescriptreact setlocal commentstring={/*\ %s\ */}
        " autocmd FileType javascriptreact,typescriptreact setlocal commentstring={/*\ %s\ */}


        autocmd BufWritePre * %s/\s\+$//e
        autocmd BufWritePre * :call TrimWhitespace()

        " When editing a file, always jump to the last known cursor position.
        " Don't do it for commit messages, when the position is invalid, or when
        " inside an event handler (happens when dropping a file on gvim).
        autocmd BufReadPost *
                                \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
                                \   exe "normal g`\"" |
                                \ endif

        autocmd FileType javascript,javascriptreact,javascript.jsx,javascript.tsx,typescript,typescriptreact setlocal omnifunc=javascriptcomplete#CompleteJS
        autocmd BufNewFile,BufRead *.jsx set filetype=javascript.jsx
        autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
augroup END

vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '>-2<CR>gv=gv

" When the type of shell script is /bin/sh, assume a POSIX-compatible
" shell for syntax highlighting purposes.
let g:is_posix = 1

set wildmode=list:longest,list:full

nnoremap <Leader><Enter> :noh<cr>

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Relative number makes it confusing for non vim users spectating...
function! ToggleRel()
        if &relativenumber == 0
                set relativenumber
        else
                set norelativenumber
        endif
endfunction
nnoremap <leader>r :call ToggleRel()<CR>

" Quicker window movement
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k
nnoremap <Leader>h <C-w>h
nnoremap <Leader>l <C-w>l

nnoremap <Leader>w :w!<cr>

" Vertical and horizontal splits
nnoremap <Leader>vs <C-w>v
nnoremap <Leader>xs <C-w>S

nnoremap <silent> <Leader>+ :vertical resize +5<CR>
nnoremap <silent> <Leader>- :vertical resize -5<CR>

nnoremap Y y$

nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap J mzJ`z

inoremap , ,<c-g>u
inoremap . .<c-g>u
inoremap ! !<c-g>u
inoremap ? ?<c-g>u

nnoremap <expr> k (v:count > 5 ? "m'" . v:count : "") . 'k'
nnoremap <expr> j (v:count > 5 ? "m'" . v:count : "") . 'j'

nnoremap \ :Rg<CR>

vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv
inoremap <C-j> <esc>:m .+1<CR>==
inoremap <C-k> <esc>:m .-2<CR>==

" search for word on cursor
nnoremap <leader>prr :CocSearch <C-R>=expand("<cword>")<CR><CR>
nnoremap <leader>pw :Rg <C-R>=expand("<cword>")<CR><CR>

" delete and paste register from visual mode
vnoremap <leader>p "_dP

" PLUGIN: EasyAlign
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" PLUGIN: CoC
" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

func GoCoC()
    :CocEnable

    function! CheckBackspace() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    inoremap <silent><expr> <Tab>
        \ coc#pum#visible() ? coc#pum#next(1) :
        \ CheckBackspace() ? "\<Tab>" :
        \ coc#refresh()
    inoremap <expr> <Tab> coc#pum#visible() ? coc#pum#next(1) : "\<Tab>"
    inoremap <expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1) : "\<S-Tab>"

    " GoTo code navigation.
    nmap <buffer> <leader>gd <Plug>(coc-definition)
    nmap <buffer> <leader>gy <Plug>(coc-type-definition)
    nmap <buffer> <leader>gi <Plug>(coc-implementation)
    nmap <buffer> <leader>gr <Plug>(coc-references)
    nmap <buffer> <leader>rr <Plug>(coc-rename)
    nmap <buffer> <leader>cf <Plug>(coc-fix-current)
    nnoremap <buffer> <leader>cr :CocRestart

    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)
endfun

autocmd BufEnter * :call GoCoC()

" PLUGIN: Tickit
call tickit#set_ticker("î˜«")
call tickit#set_location($HOME . "/projects/notes/TODO.md")

let g:netrw_browse_split=2
let g:netrw_banner=0
let g:netrw_winsize=25

" PLUGIN: rust
let g:rustfmt_autosave = 1
let g:rustfmt_emit_files = 1
let g:rustfmt_fail_silently = 0

" PLUGIN: Nerdtree
let NERDTreeMinimalUI = 1
let NERDTreeWinPos = "right"
let NERDTreeShowHidden=1
let NERDTreeIgnore = ['.map$', '.d.ts$', '^_build$[[dir]]']
map <Leader>nf :NERDTreeFind<cr>
nnoremap <Leader>nn :NERDTreeToggle<Enter>

" PLUGIN: Harpoon
nnoremap <leader>a :lua require("harpoon.mark").add_file()<CR>
nnoremap <C-e> :lua require("harpoon.ui").toggle_quick_menu()<CR>
nnoremap <C-n> :lua require("harpoon.ui").nav_next()<CR>
nnoremap <C-p> :lua require("harpoon.ui").nav_prev()<CR>

" PLUGIN: Fugitive
nmap <leader>gst :G<CR>
nmap <leader>gj :diffget //3<CR>
nmap <leader>gf :diffget //2<CR>
nmap <leader>gdf :Gdiff<CR>

" PLUGIN: Undotree
nnoremap <leader>u :UndotreeShow<CR>

" PLUGIN: fzf
nnoremap <C-T> :Files<cr>
nnoremap <Leader>b :Buffers<cr>
nnoremap <Leader>s :BLines<cr>
let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.8 } }

" Load a vim project you're working on
function Loadproj(proj) abort
        let g:autoload_path = "~/projects/" . a:proj . "/autoload/" . a:proj
        let g:plugin_path = "~/projects/" . a:proj . "/plugin/" . a:proj

        execute "source" . g:autoload_path
        execute "source" . g:plugin_path
endfunction
