" Leader
let mapleader = ","

set backspace=2   " Backspace deletes like most programs in insert mode
set nobackup
set nowritebackup
set noswapfile    " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set noshowmode
set autowrite     " Automatically :write before running commands
set relativenumber " show the numbers above your line to relative of current line
set mouse=a        " make vim clickable
set spelllang=en   " spelling in english
set pastetoggle=<F2>    " allow pasting with correct indentation
set cursorline
set smartindent
set nowrap
set hidden
set ignorecase
set smartcase
set lazyredraw
set magic
set exrc
set number
set completeopt=menuone,noinsert,noselect
set updatetime=50

" Softtabs, 2 spaces
set tabstop=2 softtabstop=2
set shiftwidth=2
set shiftround
set expandtab

" To automatically unfold all of a file
set foldlevelstart=99

" Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

" Use one space, not two, after punctuation.
set nojoinspaces

set vb t_vb=
set undofile

" https://github.com/junegunn/fzf.vim/issues/456
" Depending where it's installed
set rtp+=~/.fzf
set rtp+=/usr/local/opt/fzf

" Use RG for grepping
set grepprg=rg\ --vimgrep\ --smart-case\ --hidden\ --follow

" Splits open to the right and below
set splitbelow splitright

set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath = &runtimepath

autocmd BufWritePre * %s/\s\+$//e

filetype off                  " required

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-fugitive'
Plug 'scrooloose/nerdtree'
Plug 'morhetz/gruvbox'
Plug 'neoclide/coc.nvim', { 'branch': 'release' }
Plug 'mbbill/undotree'
Plug 'dense-analysis/ale'
Plug 'tpope/vim-commentary'
Plug 'pangloss/vim-javascript'
Plug 'plasticboy/vim-markdown'
Plug 'mattn/emmet-vim'
Plug 'junegunn/vim-easy-align'
Plug 'christoomey/vim-system-copy'
Plug 'vim-airline/vim-airline'
Plug 'tpope/vim-surround'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'elixir-editors/vim-elixir'
Plug 'rafi/awesome-vim-colorschemes'

if executable('rg')
  let g:rg_derive_root='true'
endif

" Plug 'tpope/vim-rails'
" Plug 'vim-ruby/vim-ruby'

call plug#end()

syntax on

hi Search cterm=NONE ctermbg=DarkMagenta

colorscheme happy_hacking

" because I just use TMUX backgrounds instead
hi Normal guibg=NONE ctermbg=NONE
hi NonText guibg=NONE ctermbg=NONE

" Make it obvious where 80 characters is
highlight ColorColumn ctermbg=red
call matchadd('ColorColumn', '\%81v', 100)

" When editing a file, always jump to the last known cursor position.
" Don't do it for commit messages, when the position is invalid, or when
" inside an event handler (happens when dropping a file on gvim).
autocmd BufReadPost *
  \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g`\"" |
  \ endif

autocmd FileType javascript,javascriptreact,javascript.jsx,javascript.tsx setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd BufNewFile,BufRead *.jsx set filetype=javascriptreact
autocmd BufNewFile,BufRead *.tsx set syntax=javascriptreact
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete

" When the type of shell script is /bin/sh, assume a POSIX-compatible
" shell for syntax highlighting purposes.
let g:is_posix = 1

set wildmode=list:longest,list:full

nnoremap <Leader><Enter> :noh<cr>

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Quicker window movement
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k
nnoremap <Leader>h <C-w>h
nnoremap <Leader>l <C-w>l

nnoremap <Leader>w :w!<cr>

" Vertical and horizontal splits
nnoremap <Leader>vs <C-w>v
nnoremap <Leader>zs <C-w>S

nnoremap <silent> <Leader>+ :vertical resize +5<CR>
nnoremap <silent> <Leader>- :vertical resize -5<CR>

" for easyalign
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

autocmd FileType html,css,erb,jsx,javascript setlocal shiftwidth=2 tabstop=2
autocmd FileType html,css,erb,jsx,javascript EmmetInstall

" https://github.com/tpope/vim-commentary/issues/68
autocmd FileType javascript,javascriptreact,typescript,typescriptreact setlocal commentstring={/*\ %s\ */}

" PLUGIN: Coc-vim
func GoCoC()
    :CocEnable
    inoremap <buffer> <silent><expr> <TAB>
                \ pumvisible() ? "\<C-n>" :
                \ <SID>check_back_space() ? "\<TAB>" :
                \ coc#refresh()

    inoremap <buffer> <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
    inoremap <buffer> <silent><expr> <C-space> coc#refresh()

    " GoTo code navigation.
    nmap <buffer> <leader>gd <Plug>(coc-definition)
    nmap <buffer> <leader>gy <Plug>(coc-type-definition)
    nmap <buffer> <leader>gi <Plug>(coc-implementation)
    nmap <buffer> <leader>gr <Plug>(coc-references)
    nmap <buffer> <leader>rr <Plug>(coc-rename)
    nnoremap <buffer> <leader>cr :CocRestart
endfun

autocmd BufEnter * :call GoCoC()

nnoremap \ :Rg<CR>

" PLUGIN: ale
let g:ale_linters = { 'javascript': ['eslint'], 'ruby': ['rubocop'] }
let g:ale_fixers = { 'javascript': ['eslint'], 'ruby': ['rubocop'] }
let g:ale_linters_explicit = 1
highlight ALEErrorSign ctermbg=NONE ctermfg=red
highlight ALEWarningSign ctermbg=NONE ctermfg=yellow

nmap <silent> <leader>a <Plug>(ale_next_wrap)

" Disabling highlighting
let g:ale_set_highlights = 0

" Only run linting when saving the file
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0

let g:netrw_browse_split=2
let g:netrw_banner=0
let g:netrw_winsize=25

" PLUGIN: Fugitive
nmap <leader>gst :G<CR>
nmap <leader>gj :diffget //3<CR>
nmap <leader>gf :diffget //2<CR>
nmap <leader>gd :Gdiff<CR>

" PLUGIN: Undotree
nnoremap <leader>u :UndotreeShow<CR>

" PLUGIN: nerdtree
let NERDTreeMinimalUI = 1
let NERDTreeWinPos = "right"
let NERDTreeShowHidden=1
map <Leader>nf :NERDTreeFind<cr>
nnoremap <Leader>nn :NERDTreeToggle<Enter>

" fzf for file searching
nnoremap <C-T> :Files<cr>
nnoremap <Leader>b :Buffers<cr>
nnoremap <Leader>s :BLines<cr>

" For WSL copy to clipboard
let s:clip = '/mnt/c/Windows/System32/clip.exe'
if executable(s:clip)
  augroup WSLYank
    autocmd!
    autocmd TextYankPost * call system('echo '.shellescape(join(v:event.regcontents, "\<CR>")).' | '.s:clip)
  augroup END
end

